import { StyleSheet, View, Image } from "react-native";
import React from "react";
import {
  Button,
  HelperText,
  List,
  RadioButton,
  Text,
  useTheme,
} from "react-native-paper";
import { screenWidth } from "../../../utils/contants";
import moment from "moment/moment";
import { useFormikContext } from "formik";
import { FormItemPicker } from "../../forms";

const Step1 = ({
  onNext,
  appointment,
  event,
  careReceivers,
  careReceiverAppointments,
  myAppointments,
}) => {
  const { colors, roundness } = useTheme();
  const {
    values,
    setFieldValue,
    validateForm,
    setFieldTouched,
    errors,
    touched,
  } = useFormikContext();
  console.log("Type:", values["type"]);
  console.log("Care Receiver:", values["careReceiver"]);
  console.log(
    "Care receiver: ",
    careReceivers.find((pat) => pat._id === values["careReceiver"])?.firstName
  );
  console.log(
    "Care Receiver Appointments size:",
    careReceiverAppointments.length
  );
  console.log("Appointment: ", values["appointment"]);
  console.log(values["appointment"]);
  console.log(careReceiverAppointments.map((apt) => apt.id));
  console.log(
    "Appointment: ",
    careReceiverAppointments.find(
      (apt) =>
        `${apt.id}` === `${values["appointment"]}` &&
        `${apt.cccNumber}` ===
          `${
            careReceivers.find((pat) => pat._id === values["careReceiver"])
              ?.cccNumber
          }`
    )
  );
  console.log("--------------------------------------------------------");
  return (
    <View style={styles.container}>
      <View>
        <Image
          style={styles.img}
          source={require("../../../assets/fast-dev.png")}
          resizeMode="contain"
        />
      </View>
      <Text variant="headlineLarge">STEP 1: Get started</Text>
      <View style={styles.dataContainer}>
        <RadioButton.Group
          onValueChange={(value) => {
            setFieldValue("type", value);
          }}
          value={values["type"]}
        >
          <RadioButton.Item
            label="Order for self"
            value="self"
            labelVariant="bodySmall"
          />
          <RadioButton.Item
            label="Order for another"
            value="other"
            labelVariant="bodySmall"
          />
        </RadioButton.Group>
        {errors["type"] && (
          <HelperText type="error" visible={errors["type"] && touched["type"]}>
            {errors["type"]}
          </HelperText>
        )}

        <>
          {values["type"] === "other" && (
            <>
              <FormItemPicker
                name="careReceiver"
                icon="account"
                searchable
                label="Care receiver"
                data={careReceivers}
                valueExtractor={({ _id }) => _id}
                labelExtractor={(item) => {
                  const name = `${item.firstName} ${item.lastName}(${item.cccNumber})`;
                  return name;
                }}
                renderItem={({ item }) => {
                  const name = `${item.firstName} ${item.lastName}(${item.cccNumber})`;
                  return (
                    <List.Item
                      title={name}
                      style={styles.listItem}
                      left={(props) => <List.Icon {...props} icon="account" />}
                    />
                  );
                }}
                itemContainerStyle={[
                  styles.itemContainer,
                  { borderRadius: roundness },
                ]}
              />
            </>
          )}
          {appointment && (
            <>
              {values["type"] === "self" ? (
                <>
                  <FormItemPicker
                    name="appointment"
                    icon="calendar-clock"
                    searchable
                    label="Appointment"
                    data={myAppointments.filter(
                      (apt) => apt.appointment_type === "Re-Fill"
                    )}
                    valueExtractor={({ id }) => id}
                    labelExtractor={({
                      appointment_type,
                      appointment_date,
                      date_attended,
                      appointment: apt_date,
                      next_appointment_date,
                    }) => {
                      const name = `${appointment_type} appointment`;
                      return name;
                    }}
                    renderItem={({ item }) => {
                      const {
                        appointment_type,
                        appointment_date,
                        date_attended,
                        appointment: apt_date,
                        next_appointment_date,
                      } = item;
                      const name = `${appointment_type} appointment`;
                      return (
                        <List.Item
                          title={name}
                          style={styles.listItem}
                          left={(props) => (
                            <List.Icon {...props} icon="account" />
                          )}
                        />
                      );
                    }}
                    itemContainerStyle={[
                      styles.itemContainer,
                      { borderRadius: roundness },
                    ]}
                  />
                </>
              ) : (
                <>
                  {values["careReceiver"] && (
                    <FormItemPicker
                      name="appointment"
                      icon="calendar-clock"
                      searchable
                      label="Appointment"
                      data={careReceiverAppointments.filter(
                        (apt) =>
                          apt.appointment_type === "Re-Fill" &&
                          `${apt.cccNumber}` === //Ensure both are string to avoid type conflict
                            `${
                              careReceivers.find(
                                (pat) => pat._id === values["careReceiver"]
                              )?.cccNumber
                            }`
                      )}
                      valueExtractor={({ id }) => id}
                      labelExtractor={({
                        appointment_type,
                        appointment_date,
                        date_attended,
                        appointment: apt_date,
                        next_appointment_date,
                      }) => {
                        const name = `${appointment_type} appointment`;
                        return name;
                      }}
                      renderItem={({ item }) => {
                        const {
                          appointment_type,
                          appointment_date,
                          date_attended,
                          appointment: apt_date,
                          next_appointment_date,
                        } = item;
                        const name = `${appointment_type} appointment`;
                        return (
                          <List.Item
                            title={name}
                            style={styles.listItem}
                            left={(props) => (
                              <List.Icon {...props} icon="account" />
                            )}
                          />
                        );
                      }}
                      itemContainerStyle={[
                        styles.itemContainer,
                        { borderRadius: roundness },
                      ]}
                    />
                  )}
                </>
              )}
            </>
          )}
          {event && (
            <List.Item
              style={[
                styles.listItem,
                { backgroundColor: colors.surface, borderRadius: roundness },
              ]}
              title={event.title}
              description={moment(event.distributionTime).format(
                "Do dddd MMMM yyy"
              )}
              descriptionStyle={{ color: colors.disabled }}
              left={(props) => <List.Icon {...props} icon="calendar-clock" />}
            />
          )}
        </>

        {errors["event"] && (
          <HelperText
            type="error"
            visible={errors["event"] && touched["event"]}
          >
            {errors["event"]}
          </HelperText>
        )}
        <Button
          mode="contained"
          style={{ marginTop: 10 }}
          onPress={async () => {
            const fields = ["type", "careReceiver", "appointment", "event"];
            const errors = await validateForm(values);
            const invalidFields = Object.keys(errors);
            let valid = true;
            for (const field of fields) {
              const inValid = invalidFields.includes(field);
              if (inValid) {
                valid = !inValid;
                setFieldTouched(field, true);
              }
            }
            if (valid) onNext();
          }}
        >
          PROCEED TO NEXT STEP
        </Button>
      </View>
    </View>
  );
};

export default Step1;

const styles = StyleSheet.create({
  img: {
    height: screenWidth * 0.5,
  },
  container: {
    flex: 1,
    alignItems: "center",
    width: "100%",
  },
  listItem: {
    width: "100%",
    padding: 10,
    marginVertical: 5,
  },
  dataContainer: {
    padding: 10,
    width: "100%",
  },
  itemContainer: {
    margin: 5,
  },
});
